#pragma checksum "D:\Biblioteca\Documentos\Experiments\Api Client\Api Client\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "44fc0469adef8a12fdc11e9c6361bc726be12e8c"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Biblioteca\Documentos\Experiments\Api Client\Api Client\Views\_ViewImports.cshtml"
using Api_Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Biblioteca\Documentos\Experiments\Api Client\Api Client\Views\_ViewImports.cshtml"
using Api_Client.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"44fc0469adef8a12fdc11e9c6361bc726be12e8c", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e412a289daa09c225c5489e4ef1ebeeb2e4f28a1", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Scripts/vue.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Scripts/jquery-3.5.1.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\Biblioteca\Documentos\Experiments\Api Client\Api Client\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<style>
    .modal-mask {
        position: fixed;
        z-index: 9998;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, .5);
        display: table;
        transition: opacity .3s ease;
    }

    .modal-wrapper {
        display: table-cell;
        vertical-align: middle;
    }

    .modal-container {
        width: 300px;
        margin: 0px auto;
        padding: 20px 30px;
        background-color: #fff;
        border-radius: 2px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, .33);
        transition: all .3s ease;
        font-family: Helvetica, Arial, sans-serif;
    }

    .modal-header h3 {
        margin-top: 0;
        color: #42b983;
    }

    .modal-body {
        margin: 20px 0;
    }

    /*    .modal-default-button {
        float: right;
    }*/

    /*
    * The following styles are auto-applied to elements with
    * transition=""modal"" when their visibility is toggled
    * ");
            WriteLiteral(@"by Vue.js.
    *
    * You can easily play with the modal transition by editing
    * these styles.
    */

    .modal-enter {
        opacity: 0;
    }

    .modal-leave-active {
        opacity: 0;
    }

        .modal-enter .modal-container,
        .modal-leave-active .modal-container {
            -webkit-transform: scale(1.1);
            transform: scale(1.1);
        }
</style>
<div id=""app"" class=""text-center"">
    <h1 class=""display-4"">Welcome</h1>
    <div class=""input-group mb-3"">
        <div class=""input-group-prepend"">
            <span class=""input-group-text""");
            BeginWriteAttribute("id", " id=\"", 1676, "\"", 1681, 0);
            EndWriteAttribute();
            WriteLiteral(@">Nombre Marca</span>
        </div>
        <input class=""form-control"" type=""text"" v-model=""marca.nombre"" v-on:keyup.enter=""CreateMarca"">
        <div class=""input-group-append"">
            <button class=""btn btn-primary"" type=""button"" v-on:click=""CreateMarca"">Add Marca</button>
        </div>
    </div>

    <updatemarcamodal :idmarcam=""marca.id"" :nombremarcam=""marca.nombre"" v-on:updatedvalues=""SaveUpdateMarca"" v-if=""showModal"" v-on:close=""showModal = false""></updatemarcamodal>

    <div class=""table-responsive"">
        <table class=""table table-striped table-hover"" id=""tblMarcas"">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Marca</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <tr v-for=""(data, idx) in Marcas"">
                    <td>{{idx + 1}}</td>
                    <td>
                        {{data.nombre}}
                    </td>
                    <td");
            WriteLiteral(@">
                        <button class=""btn btn-success"" v-on:click=""UpdateMarca(data)"">Edit</button>
                        <button class=""btn btn-danger"" v-on:click=""DeleteMarca(data.id)"">Delete</button>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>
");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "44fc0469adef8a12fdc11e9c6361bc726be12e8c7258", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "44fc0469adef8a12fdc11e9c6361bc726be12e8c8297", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

<script type=""text/x-template"" id=""modal-template"">
    <transition name=""modal"">
        <div class=""modal-mask"">
            <div class=""modal-wrapper"">
                <div class=""modal-container"">

                    <div class=""modal-header"">
                        <slot name=""header"">
                            <h3>Updating Marca</h3>
                        </slot>
                    </div>

                    <div class=""modal-body"">
                        <slot name=""body"">
                            <h5>ID: {{idMarcaModal}}</h5>
                            <input class=""form-control"" type=""text"" v-model=""nombreMarcaModal"" placeholder=""Nombre Marca"" v-on:keyup.enter=""sendDataMarca"">
                        </slot>
                    </div>

                    <div class=""modal-footer"">
                        <slot name=""footer"">
                            <button class=""btn btn-secondary"" v-on:click=""$emit('close')"">Cancel Update</button>
                         ");
            WriteLiteral(@"   <button class=""btn btn-primary"" v-on:click=""sendDataMarca"">Save Update</button>
                        </slot>
                    </div>
                </div>
            </div>
        </div>
    </transition>
</script>

<script>
    Vue.component('updatemarcamodal', {
        data() {
            return {
                nombreMarcaModal: this.nombremarcam
                , idMarcaModal: this.idmarcam
            }
        },
        methods: {
            sendDataMarca() {
                var newValues = {
                    id: this.idMarcaModal
                    , nombre: this.nombreMarcaModal
                }
                this.$emit(""updatedvalues"", newValues);
                this.$emit('close');
            }
        },
        props: [""idmarcam"", ""nombremarcam""],
        template: '#modal-template',
    })

    const appVue = new Vue({
        el: '#app',
        data: {
            Marcas: [],
            nombreMarca: """",
            switchButtons: tr");
            WriteLiteral(@"ue,
            showModal: false,
            marca: {
                id: 0,
                nombre: """"
            },
            idHijo: 0,
            marcaHijo: """"
        },
        mounted() {
            this.GetMarcas("""");
        },
        methods: {
            GetMarcas(idMarca) {
                let self = this;
                $.ajax({
                    type: ""POST"",
                    url: ""/Home/GetMarca"", // the URL of the controller
                    data: { id: idMarca }, // optional data
                    success: function (result) {
                        self.Marcas = result
                    },
                    error: function (req, status, error) {
                        console.log(""GetMarcas-error"");
                        console.log(req);
                        console.log(status);
                        console.log(error);
                    }
                });
            },
            CreateMarca() {
                let self =");
            WriteLiteral(@" this;
                $.ajax({
                    type: ""POST"",
                    url: ""/Home/CreateMarca"", // the URL of the controller
                    data: { nombre: self.marca.nombre }, // optional data
                    success: function (result) {
                        self.marca.nombre = """";
                        self.GetMarcas("""");
                    },
                    error: function (req, status, error) {
                        console.log(""CreateMarca-error"");
                        console.log(req);
                        console.log(status);
                        console.log(error);
                    }
                });
            },
            UpdateMarca(marca) {
                this.showModal = true;
                this.marca.id = marca.id;
                this.marca.nombre = marca.nombre;
                this.switchButtons = !this.switchButtons;
            },
            SaveUpdateMarca(updatedValues) {
                let self = this;
");
            WriteLiteral(@"                $.ajax({
                    type: ""POST"",
                    url: ""/Home/EditMarca"", // the URL of the controller
                    data: { marca: updatedValues }, // optional data
                    success: function (result) {
                        self.marca.nombre = """";
                        self.GetMarcas("""");
                    },
                    error: function (req, status, error) {
                        console.log(""SaveUpdateMarca-error"");
                        console.log(req);
                        console.log(status);
                        console.log(error);
                    }
                });
            },
            DeleteMarca(id) {
                let self = this;
                $.ajax({
                    type: ""POST"",
                    url: ""/Home/DeleteMarca"", // the URL of the controller
                    data: { id: id }, // optional data
                    success: function (result) {
                        se");
            WriteLiteral(@"lf.GetMarcas("""");
                    },
                    error: function (req, status, error) {
                        console.log(""DeleteMarca-error"");
                        console.log(req);
                        console.log(status);
                        console.log(error);
                    }
                });
            },
        }
    });
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
